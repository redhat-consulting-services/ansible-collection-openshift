apiVersion: v1beta1
kind: AgentConfig
metadata:
  name: {{ cluster_name }}
  namespace: {{ tenant_name }}
{# check if rendezvous_ip is defined, if not, use first master ip #}
{% if rendezvous_ip is defined %}
rendezvousIP: {{ rendezvous_ip }}
{% endif %}
{# check if the boot artifacts url was provided #}
{% if boot_artifacts_base_url is defined %}
bootArtifactsBaseURL: {{ boot_artifacts_base_url }}
{% endif %}
{# check if the NTP sources have been defined #}
{% if additional_ntp_sources is defined %}
additionalNTPSources: {{ additional_ntp_sources }}
{% endif %}
{# add hosts to cluster #}
hosts:
{% for host_type, host_value in agent_config.items() %}
{% for hosts in host_value.hosts %}
{% set host_index = loop %}
{# identify the role of the node #}
{% if host_type == "master" or host_type == "worker" %}
  - role: {{ host_type }}
{# identify hostname use either the defined hostname or generate it #}
{% if hosts.hostname is defined %}
    hostname: {{ hosts.hostname }}
{% else %}
    hostname: {{ host_value.hostname_prefix }}{{ host_index.index0 }}
{% endif %}

{#- root device identification #}
    rootDeviceHints:
{% if hosts.root_device.name is defined %}
      deviceName: {{ hosts.root_device.name }}
{% else %}
{% if hosts.root_device.serial_number is not defined and hosts.root_device.wwn is not defined %}
      deviceName: {{ host_value.root_device_name }}
{% endif %}
{% endif %}
{% if hosts.root_device.serial_number is defined %}
      serialNumber: {{ hosts.root_device.serial_number }}
{% endif %}
{% if hosts.root_device.wwn is defined %}
      wwn: {{ hosts.root_device.wwn }}
{% endif %}

{#- interfaces config #}
    interfaces:
{% for interface in hosts.interfaces %}
      - name: {{ interface.name }}
        macAddress: {{ interface.mac_address }}
{% endfor %}
    networkConfig:
      dns-resolver:
        config:
          server:
{% for resolver in host_value.dns_resolvers %}
            - {{ resolver }}
{% endfor %}
      routes:
        config:
{% for route in host_value.routes %}
          - destination: {{ route.destination }}
            next-hop-address: {{ route.gateway }}
            next-hop-interface: {{ route.interface }}
            table-id: {{ route.table_id }}
{% endfor %}
      interfaces:
{# ensure all interfaces are up and running #}
{% for interface in hosts.interfaces %}
        - name: {{ interface.name }}
          type: ethernet
{% if interface.mtu is defined %}
          mtu: {{ interface.mtu }}
{% endif %}
          state: up
          ipv4:
            enabled: false
{% endfor %}
{# ------------------------------------ #}
{#       generate bond interface        #}
{# ------------------------------------ #}
{% if host_value.bonds is defined %}
{% for bond in host_value.bonds %}
        - name: {{ bond.name }}
          type: bond
          state: up
          link-aggregation:
            mode: {{ bond.mode }}
            port:
{% for interface in hosts.interfaces %}
{% if interface.part_of_bond == bond.name %}
              - {{ interface.name }}
{% endif %}
{% endfor %}
{% if bond.options is defined %}
            options:
              {{ bond.options | to_nice_yaml(indent=14) | indent(14) -}}
{% endif %}
          ipv4:
{% if hosts.bonds is not defined %}
{# agent_config.<master/worker>.bonds is defined but not agent_config.<master/worker>.hosts.bonds #}
{# if that is the case, we want want to use DHCP for bond ipv4 assignment #}
            enabled: true
            dhcp: true
{% else %}
{# agent_config.<master/worker>.bonds is defined and agent_config.<master/worker>.hosts.bonds is defined #}
{# if that is the case, we want to take control over ipv4 assignments (manually configure ip addresses) #}
            enabled: true
            dhcp: false
{% for hbond in hosts.bonds %}
{% if bond.name == hbond.interface %}
            address:
{% for address in hbond.addresses %}
              - ip: {{ address.ip }}
                prefix-length: {{ address.subnet_length }}
{# endfor for address in hbond.addresses #}
{% endfor %}
{# endif for bond.name == hbond.name #}
{% endif %}
{# endfor for hbond in hosts.bond #}
{% endfor %}
{# endif for hosts.bond is not defined #}
{% endif %}
{# endfor for bond in host_value.bonds #}
{% endfor %}
{# endif for check if bonds are defined #}
{% endif %}
{# ------------------------------------ #}
{#      generate bridge interface       #}
{# ------------------------------------ #}
{% if host_value.bridges is defined %}
{% for bridge in host_value.bridges %}
        - name: {{ bridge.name }}
          state: up
          type: {{ bridge.type }}
          port:
{% for interface in bridge.interfaces %}
            - name: {{ interface.name }}
{% endfor %}
          bridge:
            allow-extra-patch-ports: true
{% if bridge.options is defined %}
            options:
              {{ bridge.options | to_nice_yaml(indent=14) | indent(14) }}
{% endif %}
{% endfor %}
{% endif %}
{# ------------------------------------ #}
{#       generate vlan interface        #}
{# ------------------------------------ #}
{% if host_value.vlans is defined %}
{% for vlan in host_value.vlans %}
        - name: {{ vlan.name }}
          type: vlan
          state: up
          vlan:
            base-iface: {{ vlan.base_interface }}
            id: {{ vlan.id }}
{% if hosts.vlans is defined %}
          ipv4:
            enabled: true
            dhcp: false
{% for hvlan in hosts.vlans %}
{% if vlan.name == hvlan.interface %}
            address:
{% for address in hvlan.addresses %}
              - ip: {{ address.ip }}
                prefix-length: {{ address.subnet_length }}
{# endfor for address in hvlan.addresses #}
{% endfor %}
{# endif for vlan.name == hvlan.name #}
{% endif %}
{# endfor for hvlan in hosts.vlan #}
{% endfor %}
{# endif hosts.vlans is defined #}
{% endif %}
{# endfor vlan in host_value.vlans #}
{% endfor %}
{# endif for check if vlan is defined #}
{% endif %}

{# endif for host_type check #}
{% endif %}
{# endfor for host_value.hosts #}
{% endfor %}
{# endfor for agent_config.items() #}
{% endfor %}
