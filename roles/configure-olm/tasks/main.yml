# Copyright redhat-consulting-services Authors
# SPDX-License-Identifier: Apache-2.0
---
- name: Disable Default Operators
  kubernetes.core.k8s_json_patch:
    kubeconfig: "{{ kubeconfig_path }}"
    kind: OperatorHub
    name: cluster
    patch:
      - op: add
        path: "/spec/disableAllDefaultSources"
        value: "{{ disable_default_operator_sources | default(true) }}"
  when: manage_operator_hub | default(true)

- name: Adding Operator CatalogSources
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition: "{{ lookup('template', item.template) }}"
  loop: "{{ operator_catalog_sources | default([]) }}"
  loop_control:
    label: "{{ item.name | default(item.template) }}"
  when: operator_catalog_sources is defined

- name: Deploying Operator ImageDigestMirrorSets
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition: "{{ lookup('template', item.template) }}"
  loop: "{{ operator_image_digest_mirrorsets | default([]) }}"
  loop_control:
    label: "{{ item.name | default(item.template) }}"
  when: operator_image_digest_mirrorsets is defined

- name: Deploying Image ImageTagMirrorSets
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition: "{{ lookup('template', item.template) }}"
  loop: "{{ image_tag_mirrorsets | default([]) }}"
  loop_control:
    label: "{{ item.name | default(item.template) }}"
  when: image_tag_mirrorsets is defined

- name: Deploy Platform MirrorSets
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: present
    definition: "{{ lookup('template', item.template) }}"
  loop: "{{ platform_mirrorsets | default([]) }}"
  loop_control:
    label: "{{ item.name | default(item.template) }}"
  when: platform_mirrorsets is defined

- name: Retrieve all pods in operator marketplace namespace
  kubernetes.core.k8s_info:
    kubeconfig: "{{ kubeconfig_path }}"
    api_version: v1
    kind: Pod
    namespace: "{{ operator_marketplace_namespace | default('openshift-marketplace') }}"
    label_selectors: "{{ operator_pod_label_selectors | default(['olm.catalogSource']) }}"
  tags:
    - update-operator-hub
  register: all_pods_info
  when: restart_operator_pods | default(false)

- name: Filter Operator Hub Pods by name pattern
  ansible.builtin.set_fact:
    operator_hub_pods: >-
      {{ all_pods_info.resources
         | selectattr('metadata.name', operator_pod_filter_type | default('match'), operator_pod_name_pattern | default('^cs-redhat-operator-index.*'))
         | list }}
  tags:
    - update-operator-hub
  when: restart_operator_pods | default(false)

- name: Check if any operator pods were found
  ansible.builtin.fail:
    msg: "No operator pods found matching pattern '{{ operator_pod_name_pattern | default('^cs-redhat-operator-index.*') }}' in namespace {{ operator_marketplace_namespace | default('openshift-marketplace') }}"
  tags:
    - update-operator-hub
  when:
    - restart_operator_pods | default(false)
    - operator_hub_pods | length == 0

- name: Print pods to be deleted
  ansible.builtin.debug:
    msg: "Deleting operator pod: {{ item.metadata.name }}"
  loop: "{{ operator_hub_pods | default([]) }}"
  loop_control:
    label: "{{ item.metadata.name }}"
  tags:
    - update-operator-hub
  when: restart_operator_pods | default(false)

- name: Delete operator pods for restart
  kubernetes.core.k8s:
    kubeconfig: "{{ kubeconfig_path }}"
    state: absent
    kind: Pod
    name: "{{ item.metadata.name }}"
    namespace: "{{ operator_marketplace_namespace | default('openshift-marketplace') }}"
  loop: "{{ operator_hub_pods | default([]) }}"
  loop_control:
    label: "{{ item.metadata.name }}"
  tags:
    - update-operator-hub
  when: restart_operator_pods | default(false)

- name: Wait for operator pods to be recreated
  kubernetes.core.k8s_info:
    kubeconfig: "{{ kubeconfig_path }}"
    api_version: v1
    kind: Pod
    namespace: "{{ operator_marketplace_namespace | default('openshift-marketplace') }}"
    label_selectors: "{{ operator_pod_label_selectors | default(['olm.catalogSource']) }}"
    wait: true
    wait_condition:
      type: Ready
      status: "True"
    wait_timeout: "{{ operator_pod_restart_timeout | default(300) }}"
  when:
    - restart_operator_pods | default(false)
    - wait_for_pod_ready | default(true)

- name: Check if any mirror sets were deployed
  set_fact:
    mirror_sets_deployed: >-
      {{
        (operator_image_digest_mirrorsets | default([]) | length > 0) or
        (image_tag_mirrorsets | default([]) | length > 0) or
        (platform_mirrorsets | default([]) | length > 0)
      }}

- name: Get initial MachineConfigPool status
  kubernetes.core.k8s_info:
    kubeconfig: "{{ kubeconfig_path }}"
    api_version: machineconfiguration.openshift.io/v1
    kind: MachineConfigPool
    name: "{{ item }}"
  register: initial_mcp_status
  loop: "{{ mcp_names | default(['master', 'worker']) }}"
  when:
    - mirror_sets_deployed | bool
    - monitor_mcp_updates | default(false)

- name: Display initial MCP status
  debug:
    msg: |
      MCP: {{ item.resources[0].metadata.name }}
      Ready Machines: {{ item.resources[0].status.readyMachineCount | default(0) }}/{{ item.resources[0].status.machineCount | default(0) }}
      Updated Machines: {{ item.resources[0].status.updatedMachineCount | default(0) }}
      Current Config: {{ item.resources[0].status.configuration.name | default('unknown') }}
      Status: {% set updating = item.resources[0].status.conditions | selectattr('type', 'equalto', 'Updating') | map(attribute='status') | first | default('False') %}{% set updated = item.resources[0].status.conditions | selectattr('type', 'equalto', 'Updated') | map(attribute='status') | first | default('False') %}{% if updating == 'True' %}ðŸŸ¡ UPDATING{% elif updated == 'True' %}ðŸŸ¢ READY{% else %}âšª UNKNOWN{% endif %}
  loop: "{{ initial_mcp_status.results | default([]) }}"
  loop_control:
    label: "{{ item.resources[0].metadata.name }}"
  when: 
    - mirror_sets_deployed | bool
    - monitor_mcp_updates | default(false)

- name: Wait for MachineConfigPools to complete updates
  kubernetes.core.k8s_info:
    kubeconfig: "{{ kubeconfig_path }}"
    api_version: machineconfiguration.openshift.io/v1
    kind: MachineConfigPool
    name: "{{ item }}"
  register: mcp_status
  loop: "{{ mcp_names | default(['master', 'worker']) }}"
  until: >
    mcp_status.resources[0].status.conditions |
    selectattr('type', 'equalto', 'Updated') |
    map(attribute='status') |
    first | default('False') == 'True'
    and
    mcp_status.resources[0].status.conditions |
    selectattr('type', 'equalto', 'Updating') |
    map(attribute='status') |
    first | default('False') == 'False'
    and
    mcp_status.resources[0].status.readyMachineCount | default(0) == mcp_status.resources[0].status.machineCount | default(0)
  retries: "{{ (mcp_check_timeout | default(1800) / mcp_check_interval | default(30)) | int }}"
  delay: "{{ mcp_check_interval | default(30) }}"
  loop_control:
    label: "{{ item }}"
  when:
    - mirror_sets_deployed | bool
    - monitor_mcp_updates | default(false)
    - wait_for_mcp_completion | default(true)

- name: Display final MCP status
  debug:
    msg: |
      âœ… MCP: {{ item.resources[0].metadata.name }}
      Ready Machines: {{ item.resources[0].status.readyMachineCount | default(0) }}/{{ item.resources[0].status.machineCount | default(0) }}
      Updated Machines: {{ item.resources[0].status.updatedMachineCount | default(0) }}
      Current Config: {{ item.resources[0].status.configuration.name | default('unknown') }}
      Updated: {{ item.resources[0].status.conditions | selectattr('type', 'equalto', 'Updated') | map(attribute='status') | first | default('Unknown') }}
      Updating: {{ item.resources[0].status.conditions | selectattr('type', 'equalto', 'Updating') | map(attribute='status') | first | default('Unknown') }}
  loop: "{{ mcp_status.results | default([]) }}"
  loop_control:
    label: "{{ item.resources[0].metadata.name }}"
  when:
    - mirror_sets_deployed | bool
    - monitor_mcp_updates | default(false)
