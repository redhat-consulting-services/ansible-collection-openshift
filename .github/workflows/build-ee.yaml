name: Build Execution Environment

on:
  workflow_call:
    inputs:
      push:
        description: "Push the built image to the registry"
        required: true
        type: boolean
      version:
        description: "Version of the collection. The galaxy.yml will be updated with this version. A commit is not created."
        required: true
        type: string
      download_artifact:
        description: "Download the artifact from the previous job"
        required: true
        type: boolean
      ee_registry_url:
        description: "URL for the execution environment registry"
        required: true
        type: string
      ee_image_repo:
        description: "Repository for the execution environment image"
        required: true
        type: string
    secrets:
      registry_redhat_io_username:
        description: "Username for registry.redhat.io"
        required: true
      registry_redhat_io_password:
        description: "Password for registry.redhat.io"
        required: true
      ee_registry_username:
        description: "Username for the execution environment registry"
        required: true
      ee_registry_password:
        description: "Password for the execution environment registry"
        required: true

env:
  IMAGE_NAME: ${{ inputs.ee_registry_url }}/${{ inputs.ee_image_repo }}

jobs:
  generate-timestamp:
    runs-on: ubuntu-latest
    outputs:
      timestamp: ${{ steps.timestamp.outputs.timestamp }}
    steps:
      - name: Generate timestamp
        id: timestamp
        run: echo "timestamp=$(date +%Y%m%d%H%M)" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: generate-timestamp
    permissions:
      contents: write
      packages: write
    strategy:
      fail-fast: false
      matrix:
        openshift_version:
          - "4.17.36"
          - "4.18.20"
          - "4.19.5"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to registry.redhat.io
        uses: docker/login-action@v3
        with:
          registry: registry.redhat.io
          username: ${{ secrets.registry_redhat_io_username }}
          password: ${{ secrets.registry_redhat_io_password }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install ansible-builder
        run: |
          pip install ansible-builder

      - name: Set image tag
        id: image_tag
        run: |
          echo "tag=${{ env.IMAGE_NAME }}:${{ inputs.version }}-ocp-${{ matrix.openshift_version }}-${{ needs.generate-timestamp.outputs.timestamp }}" >> $GITHUB_OUTPUT
          echo "latest_tag=${{ env.IMAGE_NAME }}:${{ inputs.version }}-ocp-${{ matrix.openshift_version }}-latest" >> $GITHUB_OUTPUT

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.ee_registry_url }}
          username: ${{ secrets.ee_registry_username }}
          password: ${{ secrets.ee_registry_password }}

      - uses: actions/download-artifact@v5
        if: ${{ inputs.download_artifact == true }}
        with:
          name: ansible-collection
          path: ./collections

      - name: Determine requirements yaml file
        if: ${{ inputs.download_artifact == true }}
        run: |
          cp requirements.dev.yml requirements.yml

      - name: Build execution environment
        run: |
          # Build the execution environment with OpenShift version as build arg
          ansible-builder build \
            --tag ${{ steps.image_tag.outputs.tag }} \
            --tag ${{ steps.image_tag.outputs.latest_tag }} \
            --container-runtime docker \
            --build-arg OPENSHIFT_VERSION=${{ matrix.openshift_version }} \
            --build-arg COLLECTION_VERSION=${{ inputs.version }} \
            --context .

      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@0.28.0
      #   with:
      #     image-ref: '${{ steps.image_tag.outputs.tag }}'
      #     format: 'table'
      #     exit-code: '1'
      #     ignore-unfixed: true
      #     vuln-type: 'os,library'
      #     severity: 'CRITICAL,HIGH'

      - name: Push image to registry
        # only push if the ref is a tag, or the workflow_call is set to true
        if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_call' && github.event.inputs.push == 'true')
        run: |
          docker push ${{ steps.image_tag.outputs.tag }}
          docker push ${{ steps.image_tag.outputs.latest_tag }}

      - name: Output image details
        run: |
          echo "Built and pushed image: ${{ steps.image_tag.outputs.tag }}"
          echo "Latest tag: ${{ steps.image_tag.outputs.latest_tag }}"
          echo "Repository tag: ${{ inputs.version }}"
          echo "Timestamp used: ${{ needs.generate-timestamp.outputs.timestamp }}"
          docker images | grep ${{ env.IMAGE_NAME }} || true
