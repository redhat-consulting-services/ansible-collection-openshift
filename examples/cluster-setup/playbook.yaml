- name: Bootstrap OpenShift Cluster
  hosts: localhost
  gather_facts: false
  become: false
  vars:
    iso_output_dir: &isodir /tmp/cluster/boostrap
    tenant_name: example
    cluster_name: &cluster_name ocp
    base_domain: example.com
  vars_files:
    - ./cluster_config.yaml
  roles:
    - redhat_consulting_services.openshift.bootstrap_cluster

- name: Copy ISO to NFS Share
  hosts: localhost
  become: false
  connection: local
  vars:
    iso_output_dir: *isodir
    iso_nfs_share: /nfs/isos
  tasks:
    - name: Find all .iso files in the output directory
      ansible.builtin.find:
        paths: "{{ iso_output_dir }}"
        patterns: "*.iso"
      register: found_iso_files
      delegate_to: localhost

    - name: Check if any ISO files were found
      ansible.builtin.fail:
        msg: "No ISO files found in {{ iso_output_dir }}"
      when: found_iso_files.matched == 0
      delegate_to: localhost

    - name: Copy ISO files to NFS share (served by webserver)
      ansible.builtin.copy:
        src: "{{ item.path }}"
        dest: "{{ iso_nfs_share }}/"
        mode: '0766'
        remote_src: yes
      loop: "{{ found_iso_files.files }}"
      when: found_iso_files.matched > 0

- name: Boot initial nodes from NFS ISO
  hosts: initial
  gather_facts: false
  become: false
  vars:
    virtual_media_uri: "/redfish/v1/Managers/iDRAC.Embedded.1/VirtualMedia/CD/Actions/VirtualMedia.InsertMedia"
    file_location: "http://webserver.example.com/isos/agent.x86_64.iso"
    boot_source_mode: "uefi"
  tasks:
    - name: Force unmount any existing virtual media
      dellmc.openmanage.idrac_virtual_media:
        idrac_ip: "{{ host }}"
        idrac_user: "{{ user }}"
        idrac_password: "{{ password }}"
        validate_certs: false
        force: true
        virtual_media:
          - index: 1
            insert: false
      delegate_to: localhost

    - name: Insert virtual media ISO
      dellmc.openmanage.idrac_virtual_media:
        idrac_ip: "{{ host }}"
        idrac_user: "{{ user }}"
        idrac_password: "{{ password }}"
        validate_certs: false
        force: true
        virtual_media:
          - index: 1
            insert: true
            image: "{{ file_location }}"
      delegate_to: localhost

    - name: One-time boot with virtual media
      dellmc.openmanage.idrac_virtual_media:
        idrac_ip: "{{ host }}"
        idrac_user: "{{ user }}"
        idrac_password: "{{ password }}"
        validate_certs: false
        boot_source_override_mode: "{{ boot_source_mode }}"
        boot_source_override_target: "cd"
        boot_source_override_enabled: "once"
      delegate_to: localhost

- name: Monitor cluster installation progress
  hosts: localhost
  gather_facts: false
  become: false
  vars:
    iso_output_dir: *isodir
    cluster_name: *cluster_name
  environment:
    KUBECONFIG: "{{ iso_output_dir }}/{{ cluster_name }}/auth/kubeconfig"
  tasks:
    - name: Wait for cluster bootstrap to complete
      ansible.builtin.command: >
        openshift-install wait-for bootstrap-complete --dir {{ iso_output_dir }}/{{ cluster_name }} --log-level=debug

    - name: Wait for cluster installation to complete
      ansible.builtin.command: >
        openshift-install wait-for install-complete --dir {{ iso_output_dir }}/{{ cluster_name }} --log-level=debug

    - name: List cluster nodes
      ansible.builtin.command: >
        oc get nodes
      register: oc_get_nodes

- name: Scale cluster by adding worker nodes
  hosts: localhost
  gather_facts: false
  become: false
  vars:
    kubeconfig_path: &kubeconfig "/tmp/cluster/boostrap/ocp/auth/kubeconfig"
    iso_output_dir: &isodir2 /tmp/cluster/scaling
  vars_files:
    - &scaling_config ./nodes_config.yaml
  roles:
    - redhat_consulting_services.openshift.add_nodes

- name: Copy Scaling ISO to NFS Share
  hosts: localhost
  become: false
  connection: local
  vars:
    iso_output_dir: *isodir2
    iso_nfs_share: /nfs/isos
  tasks:
    - name: Find all .iso files in the output directory
      ansible.builtin.find:
        paths: "{{ iso_output_dir }}"
        patterns: "*.iso"
      register: found_iso_files
      delegate_to: localhost

    - name: Check if any ISO files were found
      ansible.builtin.fail:
        msg: "No ISO files found in {{ iso_output_dir }}"
      when: found_iso_files.matched == 0
      delegate_to: localhost

    - name: Copy ISO files to NFS share (served by webserver)
      ansible.builtin.copy:
        src: "{{ item.path }}"
        dest: "{{ iso_nfs_share }}/"
        mode: '0766'
        remote_src: yes
      loop: "{{ found_iso_files.files }}"
      when: found_iso_files.matched > 0

- name: Boot scaleout nodes from NFS ISO
  hosts: scaleout
  gather_facts: false
  become: false
  vars:
    virtual_media_uri: "/redfish/v1/Managers/iDRAC.Embedded.1/VirtualMedia/CD/Actions/VirtualMedia.InsertMedia"
    file_location: "http://webserver.example.com/isos/node.x86_64.iso"
    boot_source_mode: "uefi"
  tasks:
    - name: Force unmount any existing virtual media
      dellmc.openmanage.idrac_virtual_media:
        idrac_ip: "{{ host }}"
        idrac_user: "{{ user }}"
        idrac_password: "{{ password }}"
        validate_certs: false
        force: true
        virtual_media:
          - index: 1
            insert: false
      delegate_to: localhost

    - name: Insert virtual media ISO
      dellmc.openmanage.idrac_virtual_media:
        idrac_ip: "{{ host }}"
        idrac_user: "{{ user }}"
        idrac_password: "{{ password }}"
        validate_certs: false
        force: true
        virtual_media:
          - index: 1
            insert: true
            image: "{{ file_location }}"
      delegate_to: localhost

    - name: One-time boot with virtual media
      dellmc.openmanage.idrac_virtual_media:
        idrac_ip: "{{ host }}"
        idrac_user: "{{ user }}"
        idrac_password: "{{ password }}"
        validate_certs: false
        boot_source_override_mode: "{{ boot_source_mode }}"
        boot_source_override_target: "cd"
        boot_source_override_enabled: "once"
      delegate_to: localhost

- name: Monitor cluster after scaling
  hosts: localhost
  gather_facts: false
  become: false
  vars:
    kubeconfig_path: *kubeconfig
    node_scaling_config: *scaling_config
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  tasks:
    - name: Wait for new nodes to be ready
      ansible.builtin.command: >
        oc adm node-image monitor --ip-addresses=$(echo $(yq '.worker.hosts[].vlans[0].addresses[0].ip' < {{ node_scaling_config }}) | sed -e "s/ /,/g")

    - name: Wait for new nodes to be schedulable
      ansible.builtin.command: >
        oc wait --for=condition=Ready node --all --timeout=600s
